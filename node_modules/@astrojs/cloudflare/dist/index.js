import esbuild from "esbuild";
import * as fs from "fs";
import * as os from "os";
import glob from "tiny-glob";
import { fileURLToPath } from "url";
function getAdapter(isModeDirectory) {
  return isModeDirectory ? {
    name: "@astrojs/cloudflare",
    serverEntrypoint: "@astrojs/cloudflare/server.directory.js",
    exports: ["onRequest"]
  } : {
    name: "@astrojs/cloudflare",
    serverEntrypoint: "@astrojs/cloudflare/server.advanced.js",
    exports: ["default"]
  };
}
const SHIM = `globalThis.process = {
	argv: [],
	env: {},
};`;
const SERVER_BUILD_FOLDER = "/$server_build/";
function createIntegration(args) {
  let _config;
  let _buildConfig;
  let needsBuildConfig = false;
  const isModeDirectory = (args == null ? void 0 : args.mode) === "directory";
  return {
    name: "@astrojs/cloudflare",
    hooks: {
      "astro:config:setup": ({ config, updateConfig }) => {
        needsBuildConfig = !config.build.client;
        updateConfig({
          build: {
            client: new URL(`.${config.base}`, config.outDir),
            server: new URL(`.${SERVER_BUILD_FOLDER}`, config.outDir),
            serverEntry: "_worker.js"
          }
        });
      },
      "astro:config:done": ({ setAdapter, config }) => {
        setAdapter(getAdapter(isModeDirectory));
        _config = config;
        _buildConfig = config.build;
        if (config.output === "static") {
          throw new Error(`
  [@astrojs/cloudflare] \`output: "server"\` is required to use this adapter. Otherwise, this adapter is not necessary to deploy a static site to Cloudflare.

`);
        }
        if (config.base === SERVER_BUILD_FOLDER) {
          throw new Error(`
  [@astrojs/cloudflare] \`base: "${SERVER_BUILD_FOLDER}"\` is not allowed. Please change your \`base\` config to something else.`);
        }
      },
      "astro:build:setup": ({ vite, target }) => {
        if (target === "server") {
          vite.resolve = vite.resolve || {};
          vite.resolve.alias = vite.resolve.alias || {};
          const aliases = [{ find: "react-dom/server", replacement: "react-dom/server.browser" }];
          if (Array.isArray(vite.resolve.alias)) {
            vite.resolve.alias = [...vite.resolve.alias, ...aliases];
          } else {
            for (const alias of aliases) {
              vite.resolve.alias[alias.find] = alias.replacement;
            }
          }
          vite.ssr = vite.ssr || {};
          vite.ssr.target = vite.ssr.target || "webworker";
        }
      },
      "astro:build:start": ({ buildConfig }) => {
        if (needsBuildConfig) {
          buildConfig.client = new URL(`.${_config.base}`, _config.outDir);
          buildConfig.server = new URL(`.${SERVER_BUILD_FOLDER}`, _config.outDir);
          buildConfig.serverEntry = "_worker.js";
        }
      },
      "astro:build:done": async () => {
        const entryPath = fileURLToPath(new URL(_buildConfig.serverEntry, _buildConfig.server)), entryUrl = new URL(_buildConfig.serverEntry, _config.outDir), buildPath = fileURLToPath(entryUrl);
        await esbuild.build({
          target: "es2020",
          platform: "browser",
          entryPoints: [entryPath],
          outfile: buildPath,
          allowOverwrite: true,
          format: "esm",
          bundle: true,
          minify: true,
          banner: {
            js: SHIM
          }
        });
        const serverUrl = new URL(_buildConfig.server);
        await fs.promises.rm(serverUrl, { recursive: true, force: true });
        const cloudflareSpecialFiles = ["_headers", "_redirects", "_routes.json"];
        if (_config.base !== "/") {
          for (const file of cloudflareSpecialFiles) {
            try {
              await fs.promises.rename(
                new URL(file, _buildConfig.client),
                new URL(file, _config.outDir)
              );
            } catch (e) {
            }
          }
        }
        const routesExists = await fs.promises.stat(new URL("./_routes.json", _config.outDir)).then((stat) => stat.isFile()).catch(() => false);
        if (!routesExists) {
          const staticPathList = (await glob(`${fileURLToPath(_buildConfig.client)}/**/*`, {
            cwd: fileURLToPath(_config.outDir),
            filesOnly: true
          })).filter((file) => cloudflareSpecialFiles.indexOf(file) < 0).map((file) => `/${file}`);
          const redirectsExists = await fs.promises.stat(new URL("./_redirects", _config.outDir)).then((stat) => stat.isFile()).catch(() => false);
          if (redirectsExists) {
            const redirects = (await fs.promises.readFile(new URL("./_redirects", _config.outDir), "utf-8")).split(os.EOL).map((line) => {
              const parts = line.split(" ");
              if (parts.length < 2) {
                return null;
              } else {
                return parts[0].replace(/\/:.*?(?=\/|$)/g, "/*").replace(/\?.*$/, "");
              }
            }).filter(
              (line, index, arr) => line !== null && arr.indexOf(line) === index
            );
            if (redirects.length > 0) {
              staticPathList.push(...redirects);
            }
          }
          await fs.promises.writeFile(
            new URL("./_routes.json", _config.outDir),
            JSON.stringify(
              {
                version: 1,
                include: ["/*"],
                exclude: staticPathList
              },
              null,
              2
            )
          );
        }
        if (isModeDirectory) {
          const functionsUrl = new URL(`file://${process.cwd()}/functions/`);
          await fs.promises.mkdir(functionsUrl, { recursive: true });
          const directoryUrl = new URL("[[path]].js", functionsUrl);
          await fs.promises.rename(entryUrl, directoryUrl);
        }
      }
    }
  };
}
export {
  createIntegration as default,
  getAdapter
};
